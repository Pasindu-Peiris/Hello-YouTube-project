// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model USER {
  userID           Int      @id @default(autoincrement())
  username         String
  email            String   @unique
  password         String
  registrationDate DateTime @default(now())
  status           String
  role             String   @default("user")

  taskSub taskSub?
  taskVideo taskVideo[]?
  completedSub   completedSub[]?
  completedVideo completedVideo[]?
}

model taskSub {
  taskSubID      Int      @id @default(autoincrement())
  channelLink    String
  description    String
  createdDate    DateTime @default(now())
  status         String
  completedCount Int
  userID Int @unique

  USER USER @relation(fields: [userID], references: [userID])
  completedSub completedSub[]
}

model taskVideo {
  taskVideoID    Int      @id @default(autoincrement())
  videoLink      String
  description    String
  createdDate    DateTime @default(now())
  status         String
  completedCount Int
  userID Int

  USER USER @relation(fields: [userID], references: [userID])
  completedVideo completedVideo[]
}

model completedSub {
  completedSubID Int      @id @default(autoincrement())
  userID         Int
  taskSubID      Int
  submissionDate DateTime @default(now())
  proofLink      String
  status         String

  USER    USER    @relation(fields: [userID], references: [userID], onDelete: Cascade)
  taskSub taskSub @relation(fields: [taskSubID], references: [taskSubID], onDelete: Cascade)
}

model completedVideo {
  completedVideoID Int      @id @default(autoincrement())
  userID           Int
  taskVideoID      Int
  submissionDate   DateTime @default(now())
  proofLink        String
  status           String

  USER      USER      @relation(fields: [userID], references: [userID], onDelete: Cascade)
  taskVideo taskVideo @relation(fields: [taskVideoID], references: [taskVideoID], onDelete: Cascade)
}

model Admin {
  id        Int   @id @default(autoincrement())
  email     String   @unique
  password  String?
  role String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
